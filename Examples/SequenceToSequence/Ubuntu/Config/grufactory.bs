# NB: lots of redundant dropout nodes removed, may impact results ...

GRUPreviousHC (gruState) = [
   h = BS.Loop.Previous (gruState.h)         // hidden state(t-1)
   x = h
]

GRUNextHC (gruState) = [
   h = BS.Loop.Next (gruState.h)             // hidden state(t+1)
   x = h
]

StrongPreviousHC (gruState) = [
   h = BS.Loop.Previous (gruState.h)         // hidden state(t-1)
   x = BS.Loop.Previous (gruState.xcopy)     // x(t-1)
]

StrongNextHC (gruState) = [
   h = BS.Loop.Next (gruState.h)             // hidden state(t+1)
   x = BS.Loop.Next (gruState.xcopy)         // x(t+1)
]

GRUInstantiate (f, x, prevState) = [
  _privateInnards = [
     htprev = prevState.h
     xtprev = prevState.x

     z = Sigmoid (f.Zoo * xtprev + f.Zoi * x + f.Zo);           // => f
     prer = f.Roo * xtprev + f.Roi * x + f.Ro
     r = if f.stronglyTyped then prer else Sigmoid (prer)       // => z
     prehtilde = if f.stronglyTyped
                 then f.Hoo * xtprev + f.Hoi * x + f.Ho
                 else f.Hoo * (r .* htprev) + f.Hoi * x + f.Ho
     htilde = Tanh (prehtilde)                                  // => o

     deltaht = if f.stronglyTyped
               then (Constant (0) + r) .* htilde + (Constant(1) - z) .* htprev
               else (Constant (1) - z) .* (htilde - htprev)

     ht = htprev + if f.addZoneout then Dropout (deltaht) else deltaht
  ]

  h = _privateInnards.ht
  xcopy = x
  dim = f.outputDim
]

RecurrentGRUInstantiate (factory, x, previousHook) = [
  prevState = previousHook (gruState)
  gruState = GRUInstantiate (factory, x, prevState)
].gruState

RecurrentGRUFactory (outputDim,
                     inputDim,
                     stronglyTyped=false,
                     addDropout=false,
                     addZoneout=false) = [
  stronglyTyped1 = stronglyTyped ; addZoneout1 = addZoneout
  addDropout1 = addDropout

  Woo() = BS.Parameters.WeightParam (outputDim, outputDim)
  Woi() = BS.Parameters.WeightParam (outputDim, inputDim)
  Bo () = BS.Parameters.BiasParam (outputDim)

  res = [
     Zoo = Woo (); Zoi = Woi (); Zo = Bo ()
     Roo = Woo (); Roi = Woi (); Ro = Bo ()
     Hoo = Woo (); Hoi = Woi (); Ho = Bo ()

     inputDim = inputDim
     outputDim = outputDim
     stronglyTyped = stronglyTyped1
     addZoneout = addZoneout1
     addDropout = addDropout1
  ]
].res

RecurrentBiresidualGRUStackFactory (layerDims, 
                                    inputDim, 
                                    stronglyTyped=false,
                                    addDropout=false,
                                    addZoneout=false) = [
  layerDims1 = layerDims ; inputDim1 = inputDim
  stronglyTyped1 = stronglyTyped ; addZoneout1 = addZoneout 
  addDropout1 = addDropout

  res = [
    factories[i:0..Length (layerDims)-1] = [
      vDim = if i == 0 then inputDim else factories[i-1].dim

      fwd = RecurrentGRUFactory (layerDims[i],
                                 vDim,
                                 stronglyTyped=stronglyTyped1, 
                                 addDropout=addDropout1,
                                 addZoneout=addZoneout1)
      bwd = RecurrentGRUFactory (layerDims[i], 
                                 vDim,
                                 stronglyTyped=stronglyTyped1, 
                                 addDropout=addDropout1,
                                 addZoneout=addZoneout1)
      dim = layerDims[i]
    ]

    layerDims = layerDims1
    inputDim = inputDim1
  ]
].res

RecurrentBiresidualGRUStackInstantiate (f, input) = [
  layers[i:0..Length (f.layerDims)-1] = [
    dropInput = if i == 0 
                then if f.addDropout 
                     then Dropout (input) 
                     else input 
                else layers[i-1].h

    previousHook = if f.stronglyTyped 
                   then StrongPreviousHC 
                   else GRUPreviousHC

    nextHook = if f.stronglyTyped 
               then StrongNextHC 
               else GRUNextHC

    fwd = RecurrentGRUInstantiate (f.factories[i].fwd,
                                   dropInput,
                                   previousHook)

    bwd = RecurrentGRUInstantiate (f.factories[i].bwd,
                                   dropInput,
                                   nextHook)

    dropfh = if f.addDropout then Dropout (fwd.h) else fwd.h
    dropbh = if f.addDropout then Dropout (bwd.h) else bwd.h
    h = dropfh + dropbh + dropInput
    dim = f.layerDims[i] 
  ]
].layers
