#! /usr/bin/env perl

use warnings;
use strict;

use Text::CSV;
use Data::Dumper;

my $mode = shift @ARGV or die;

sub save_hash ($$)
{
  if ($mode eq "preprocess")
    {
      my ($filename, $hash) = @_;
      my $fh = new IO::File $filename, "w" or die "$filename: $!";
      $fh->binmode (":utf8");

      my $index = 1;
    
      while (my ($k, $v) = each %$hash)
        {
          my (undef, $c) = @$v;
          do { print $fh "$k\t$index\t$c\n"; ++$index; } if $c > 1;
        }
    }
}

sub load_hash ($$)
{
  if ($mode ne "preprocess")
    {
      my ($filename, $hash) = @_;
      my $fh = new IO::File $filename, "r" or die "$filename: $!";
    
      while (defined ($_ = <$fh>))
        {
          chomp;
          my ($k, $n, $c) = split /\t/, $_, 3;
    
          $hash->{$k} = [$n, $c];
        }
    }
}

sub encodetri ($$)
{
  my ($v, $dict) = @_;

  if ($mode eq "preprocess")
    {
      $dict->{$v} ||= [ scalar keys %$dict, 0 ];
      ++$dict->{$v}->[1];
    }

  return exists $dict->{$v} ? $dict->{$v}->[0] : 1 + scalar keys %$dict;
}

sub morphofeatures ($$)
{
  my ($s, $codec) = @_;

  my @morpho;

  if ($s =~ m/^[[:upper:]]/)
    {
      push @morpho, (join ":", encodetri (" m:firstcap", $codec), 1);
    }

  if ($s !~ m/[[:lower:]]/)
    {
      push @morpho, (join ":", encodetri (" m:nolower", $codec), 1);
    }


  return @morpho;
}

sub process ($$)
{
  my ($fulls, $codec) = @_;

  my $s = lc ($fulls);
  my @morpho = morphofeatures ($fulls, $codec);

  my $numchars = 2; # trigrams = 2, quadgrams = 3, etc.

  my @chars = split //, $s;
  do
    {
      push @morpho, join ":", encodetri ($s, $codec), "1";
      return join " ", @morpho;
    }
  if $#chars < $numchars;

  my %trigrams;

  foreach my $pos ($numchars .. $#chars)
    {
      ++$trigrams{join "", @chars[$pos-$numchars .. $pos]};
    }

  my $sum = 0;
  while (my (undef, $v) = each %trigrams)
    {
      $sum += $v;
    }

  my @tristring;

  while (my ($k, $v) = each %trigrams)
    {
      push @tristring, (join ":", 
                          encodetri ($k, $codec),
                          sprintf ("%.3f", sqrt ($v / $sum)));
    }

  return join " ", @tristring, @morpho;
}

sub encode ($$$)
{
  my ($v, $trimemo, $codec) = @_;

  $trimemo->{$v} ||= process ($v, $codec);

#  warn $trimemo->{$v};

  return $trimemo->{$v};
}

sub tokenize ($)
{
  my ($s) = @_;

  return map { s/[0-9]+/0/g; 
               $_ }
             split /[\s[:punct:]]+/,
             $s;
}

#----------------------------------------------------------------

my %trimemo;
my %vocab;

sub printexample ($$$$)
{
  my ($sid, $context, $query1, $query2) = @_;

  my @fullcontext = tokenize $context;
  my @context = @fullcontext > 40 ? splice @fullcontext, -40 : @fullcontext;
  my @fullquery1 = tokenize $query1;
  my @query1 = @fullquery1 > 40 ? splice @fullquery1, 40 : @fullquery1;
  my @fullquery2 = tokenize $query2;
  my @query2 = @fullquery2 > 40 ? splice @fullquery2, 40 : @fullquery2;

  my $ml = "|MultiLabel 1 0";

  while (@context || @query1 || @query2)
    {
      my $ct1 = @context ? "|Context @{[encode (shift @context, \%trimemo, \%vocab)]}" : "";
      my $qt1 = @query1 ?  "|Query1 @{[encode (shift @query1, \%trimemo, \%vocab)]}" : "";
      my $qt2 = @query2 ?  "|Query2 @{[encode (shift @query2, \%trimemo, \%vocab)]}" : "";

      print "$sid $ct1 $qt1 $qt2 $ml\n";

      $ml = "";
    }
}

#----------------------------------------------------------------

my $vocabfile = "shortvocab3tri";

load_hash ($vocabfile, \%vocab);

my $csv = Text::CSV->new ({ binary => 1 }) or die Text::CSV->error_diag ();

# eat header
<>;

my $sid = 1;
my $maxsid = $mode eq "megatrain" || $mode eq "preprocess" ? 200000 : 20000;
my @positives;
my @negatives;

while (my $row = $csv->getline (*ARGV))
  {
    my @fields = @$row;

    printexample ($sid, $fields[0], $fields[1], $fields[2]);

    last if ++$sid > $maxsid;
  }

save_hash ($vocabfile, \%vocab);
