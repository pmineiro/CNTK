#! /usr/bin/env perl

use warnings;
use strict;

use Text::CSV;

my $mode = shift @ARGV or die;

sub save_hash ($$)
{
  if ($mode eq "preprocess")
    {
      my ($filename, $hash) = @_;
      my $fh = new IO::File $filename, "w" or die "$filename: $!";
      $fh->binmode (":utf8");

      my $index = 1;
    
      while (my ($k, $v) = each %$hash)
        {
          my (undef, $c) = @$v;
          do { print $fh "$k\t$index\t$c\n"; ++$index; } if $c > 1;
        }
    }
}

sub load_hash ($$)
{
  if ($mode ne "preprocess")
    {
      my ($filename, $hash) = @_;
      my $fh = new IO::File $filename, "r" or die "$filename: $!";
    
      while (defined ($_ = <$fh>))
        {
          chomp;
          my ($k, $n, $c) = split /\t/, $_, 3;
    
          $hash->{$k} = [$n, $c];
        }
    }
}

sub encode ($$)
{
  my ($v, $dict) = @_;

  if ($mode eq "preprocess")
    {
      $dict->{$v} ||= [ scalar keys %$dict, 0 ];
      ++$dict->{$v}->[1];
    }

  return exists $dict->{$v} ? $dict->{$v}->[0] : 1 + scalar keys %$dict;
}

sub tokenize ($)
{
  my ($s) = @_;

  return map { s/[0-9]+/0/g;
               substr ($_, 0, 7) } 
               split /[\s[:punct:]]+/, 
               lc ($s);
}

#----------------------------------------------------------------

my %vocab;

sub printexample ($@)
{
  my ($sid, $context, @queries) = @_;

  local $\="\n";

  my @fullcontext = tokenize $context;
  my @context = @fullcontext > 40 ? splice @fullcontext, -40 : @fullcontext;

  my @tokenized = map { [ tokenize ($_) ] } @queries;

  my $ml = join " ", "|MultiLabel", "1", map { 0 } (1 .. $#queries);

  while (@context || grep { @$_ } @tokenized)
    {
      my $ct = @context ? "|Context @{[encode (shift @context, \%vocab)]}:1" : "";
      my $num = 1;
      my @qt = map { @{$tokenized[$_]} ? "|Query$_ @{[encode (shift @{$tokenized[$_]}, \%vocab)]}:1" : "" } (0 .. $#tokenized);

      print join " ", $sid, $ml, $ct, @qt;

      $ml = "";
    }
}

#----------------------------------------------------------------

my $vocabfile = "shortvocab4";

load_hash ($vocabfile, \%vocab);

my $csv = Text::CSV->new ({ binary => 1 }) or die Text::CSV->error_diag ();

# eat header
<>;

my $sid = 1;
my $maxsid = $mode eq "megatrain" || $mode eq "preprocess" ? 100000 : 10000;
my @positives;
my @negatives;

while (my $row = $csv->getline (*ARGV))
  {
    my @fields = @$row;

    printexample ($sid, @fields);

    last if ++$sid > $maxsid;
  }

save_hash ($vocabfile, \%vocab);
