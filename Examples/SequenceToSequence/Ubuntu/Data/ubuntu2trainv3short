#! /usr/bin/env perl

use warnings;
use strict;

use Text::CSV;

sub save_hash ($$)
{
  my ($filename, $hash) = @_;
  my $fh = new IO::File $filename, "w" or die "$filename: $!";
  $fh->binmode (":utf8");

  while (my ($k, $v) = each %$hash)
    {
      print $fh "$k\t$v\n";
    }
}

sub load_hash ($$)
{
  my ($filename, $hash) = @_;
  my $fh = new IO::File $filename, "r" or die "$filename: $!";

  while (defined ($_ = <$fh>))
    {
      chomp;
      my ($k, $v) = split /\t/, $_, 2;

      $hash->{$k} = $v;
    }
}

my $oov = 0;

sub encode ($$)
{
  my ($v, $dict) = @_;

  $dict->{$v} ||= do { ++$oov; scalar keys %$dict; };

  return $dict->{$v};
}

#----------------------------------------------------------------

my %vocab;

sub printexample ($$$$)
{
  my ($sid, $context, $query1, $query2) = @_;

  foreach my $var ((\$context, \$query1, \$query2))
    {
      $$var =~ s/([[:punct:]]+)\s/ $1 /g;
      $$var =~ s/\s([[:punct:]]+)/ $1 /g;
    }

  my @fullcontext = split /\s+/, $context;
  my @context = @fullcontext > 40 ? splice @fullcontext, -40 : @fullcontext;
  my @query1 = split /\s+/, $query1;
  my @query2 = split /\s+/, $query2;

  my $ml = "|MultiLabel 1 0";

  while (@context || @query1 || @query2)
    {
      my $ct1 = @context ? "|Context @{[encode (shift @context, \%vocab)]}:1" : "";
      my $qt1 = @query1 ? "|Query1 @{[encode (shift @query1, \%vocab)]}:1" : "";
      my $qt2 = @query2 ? "|Query2 @{[encode (shift @query2, \%vocab)]}:1" : "";

      print "$sid $ct1 $qt1 $qt2 $ml\n";

      $ml = "";
    }
}

#----------------------------------------------------------------

my $mode = shift @ARGV or die;
$mode eq "megatrain" || $mode eq "test" || $mode eq "valid" or die "bad mode $mode";
my $vocabfile = "shortvocab3";

if ($mode eq "test" || $mode eq "valid")
  {
    load_hash ($vocabfile, \%vocab);
  }

my $csv = Text::CSV->new ({ binary => 1 }) or die Text::CSV->error_diag ();

# eat header
<>;

my $sid = 1;
my $skip = 0;
my $maxsid = $mode eq "megatrain" ? 100000 : 10000;
my @positives;
my @negatives;

while (my $row = $csv->getline (*ARGV))
  {
    my @fields = @$row;

    printexample ($sid, $fields[0], $fields[1], $fields[2]);
    ++$sid;

    last if ++$sid > $maxsid;
  }

save_hash ($vocabfile, \%vocab);

warn join "\t", $oov, $skip;
